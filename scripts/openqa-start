#!/bin/bash
set -e
cd "$OPENQA_BASEDIR/repos/openQA"
export LANG=en_US.utf8
what=$1
shift || true

declare -A shortcuts=(
    [wu]=webui
    [lv]=live
    [ws]=websockets
    [sc]=scheduler
    [wo]=worker
    [wc]=workercache
    [wm]=workercache-minion
    [gr]=gru
    [cj]=clone-job
    [jc]=clone-job
    [job-clone]=clone-job
    [cl]=client
    [q]=api
    [cmd]=command
    [dbup]=db-update
    [doc]=generate-documentation
)

if [[ $what == '' ]] || [[ $what == --help ]] || [[ $what == -h ]]; then
    echo "Starts an openQA service/script using repos and test data within $OPENQA_BASEDIR"
    echo "usage: $0 service_or_script_name [args]"
    echo "where service_or_script_name is one of:"
    echo "   shortcut | long daemon name"
    for daemon in 'wu  ' 'lv  ' 'ws  ' 'sc  ' 'wo  ' 'sc  ' 'wc  ' 'wm  ' 'gr  ' 'cj  ' 'cl  ' 'cmd ' 'dbup'; do
        echo "   $daemon     | ${shortcuts[${daemon%% *}]}"
    done
    echo "args are forwarded to the specified service/script"
    echo "set OPENQA_BASE_PORT to customize ports (see README.md)"
    exit 0
fi

what=${shortcuts[$what]:-$what}

default_port=9526
if [[ $OPENQA_INSTANCE ]]; then
    export OPENQA_BASE_PORT=$(($default_port + $OPENQA_INSTANCE * 100))
    export OPENQA_CONFIG=$OPENQA_CONFIG/$OPENQA_INSTANCE
    host_params=http://localhost:$OPENQA_BASE_PORT
    echo "starting as instance $OPENQA_INSTANCE"
    echo "  OPENQA_BASE_PORT=$OPENQA_BASE_PORT"
    echo "  OPENQA_CONFIG=$OPENQA_CONFIG"
else
    OPENQA_INSTANCE=0
    host_params=http://localhost:$default_port
    if [[ $OPENQA_BASE_PORT ]]; then
        export OPENQA_CONFIG=$OPENQA_CONFIG/$OPENQA_BASE_PORT
    fi
fi


function start_script
{
    echo "$@"
    if [[ $PERL_DEBUGGER_GUI ]]; then
        perl -d:ptkdb "$@"
    elif [[ $PERL_ARGS ]]; then
        perl $PERL_ARGS "$@"
    else
        "$@"
    fi
}

function set_title
{
    if [[ $KONSOLE_DBUS_SESSION ]]; then
        local konsole_service=${KONSOLE_SERVICE:-$(qdbus-qt5 | grep konsole | head -n1)}
        qdbus-qt5 $konsole_service "$KONSOLE_DBUS_SESSION" setTitle 1 "$@"
    fi
}

if [[ $what == webui ]]; then
    set_title wu-$OPENQA_INSTANCE
    start_script script/openqa daemon "$@"
elif [[ $what == command ]]; then
    set_title cmd-$OPENQA_INSTANCE
    start_script script/openqa "$@"
elif [[ $what == gru ]]; then
    set_title gru-$OPENQA_INSTANCE
    start_script script/openqa gru "$@"
elif [[ $what == gru-run ]]; then
    set_title gru-run-$OPENQA_INSTANCE
    start_script script/openqa gru run "$@"
elif [[ $what == live ]]; then
    set_title lv-$OPENQA_INSTANCE
    start_script script/openqa-livehandler daemon "$@"
elif [[ $what == scheduler ]]; then
    set_title sc-$OPENQA_INSTANCE
    start_script script/openqa-scheduler daemon "$@"
elif [[ $what == websockets ]]; then
    set_title ws-$OPENQA_INSTANCE
    start_script script/openqa-websockets daemon "$@"
elif [[ $what == client ]]; then
    set_title cl-$OPENQA_INSTANCE
    start_script script/client --host $host_params --apikey $OPENQA_KEY --apisecret $OPENQA_SECRET "$@"
elif [[ $what == api ]]; then
    set_title api-$OPENQA_INSTANCE
    start_script script/openqa-cli api --apikey $OPENQA_KEY --apisecret $OPENQA_SECRET -H $host_params "$@"
elif [[ $what == worker ]]; then
    read= instance=1
    for arg in "$@"; do
        [[ $read == instance ]] && instance=$arg && break
        [[ $arg == --instance ]] && read=instance
    done
    set_title "wo-$instance"
    [[ -z $read ]] && instance_arg='--instance 1' || instance_arg=
    start_script script/worker --isotovideo "$OPENQA_BASEDIR/repos/os-autoinst/isotovideo" $instance_arg --verbose --apikey $OPENQA_KEY --apisecret $OPENQA_SECRET "$@"
elif [[ $what == workercache ]]; then
    set_title wc
    start_script script/openqa-workercache daemon "$@"
elif [[ $what == workercache-minion ]]; then
    set_title wm
    start_script script/openqa-workercache minion worker "$@"
elif [[ $what == clone-job ]]; then
    set_title cj-$OPENQA_INSTANCE
    start_script script/openqa-clone-job --dir "$OPENQA_BASEDIR/openqa/share/factory" --show-progress --apikey $OPENQA_KEY --apisecret $OPENQA_SECRET --host $host_params "$@"
elif [[ $what == db-update ]]; then
    start_script script/initdb --prepare_init --force "$@"
    start_script script/upgradedb --prepare_upgrades --force "$@"
elif [[ $what == generate-documentation ]]; then
    export KEEP_OUTPUT=1
    [[ -d "$OPENQA_BASEDIR/repos/openQA/out" ]] && rm -fr "$OPENQA_BASEDIR/repos/openQA/out"
    start_script tools/"$what" "$@"
    echo "documentation should be under: file://$OPENQA_BASEDIR/repos/openQA/out/docs/index.html"
elif [[ $what == all ]]; then
    if [[ ! $KONSOLE_DBUS_SESSION ]]; then
        echo "only works with Konsole"
        exit -2
    fi
    source "$OPENQA_BASEDIR/repos/openQA-helper/lib/tabs.sh"
    sessions=(
        openQA-webui               'wu'
        openQA-live                'lv'
        openQA-websockets          'ws'
        openQA-scheduler           'sc'
        openQA-worker1             'wo'
    )
    start_sessions ${sessions[@]}
elif [[ -x script/openqa-$what ]]; then
    start_script script/openqa-"$what" "$@"
elif [[ -x script/$what ]]; then
    start_script script/"$what" "$@"
elif [[ -x tools/openqa-$what ]]; then
    start_script tools/openqa-"$what" "$@"
elif [[ -x tools/$what ]]; then
    start_script tools/"$what" "$@"
else
    echo "Script \"$what\" not found."
    exit -1
fi
